# -*- coding: utf-8 -*-
"""SURROGATE MODELS CODE

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qD-rzTBrK0JKW9TRP4YBccn6JzH_ZF22

DNN MODEL
"""

import numpy as np
from keras.layers import Dense, Activation
from keras.models import Sequential
from sklearn.model_selection import train_test_split
import sklearn.metrics as metrics
import seaborn as sns; sns.set()
import matplotlib.pyplot as plt
from google.colab import files
import pandas as pd

train_data = pd.read_csv('processed_data.csv')
data = train_data.drop('sample',1)
data = data.values
Y = data[:,-1]
X = data[:, :-1]
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.08, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Initialising the ANN
model = Sequential()

# Adding the input layer and the first hidden layer
model.add(Dense(32, activation = 'relu', input_dim = 6))

# Adding the second hidden layer
model.add(Dense(units = 64, activation = 'relu'))

# Adding the third hidden layer
model.add(Dense(units = 64, activation = 'relu'))

# Adding the output layer
model.add(Dense(units = 1))


model.compile(optimizer = 'adam',loss = 'mean_absolute_error')
model.fit(X_train, y_train, batch_size = 10, epochs = 30)

y_predNN = model.predict(X_test)

metrics.mean_squared_error(y_test,y_predNN)

plt.plot(y_test[10:50], color = 'red', label = 'Real data')
plt.plot(y_predNN[10:50], color = 'blue', label = 'Predicted data')
plt.title('Prediction')
plt.legend()
plt.show()

"""LINEAR REGRESSION"""

import numpy as np
import pandas as pd
from sklearn import datasets, linear_model
model1 = linear_model.LinearRegression()
model1.fit( X_train,y_train)

y_pred_linear = model1.predict(X_test)
fig = plt.figure()
ax = plt.subplot(111)
ax.plot(y_test[10:50], color = 'red', label = 'Real data')
ax.plot(y_pred_linear[10:50], color = 'blue', label = 'Predicted data')
plt.title('Linear Regression Prediction')
ax.legend()
plt.show()
fig.savefig("LR_result.png")
files.download("LR_result.png")

metrics.mean_squared_error(y_test,y_pred_linear)

"""SVRR"""

train_data=train_data.drop('sample',1)
data = train_data.values
Y = data[:,-1]
X = data[:, :-1]
Y = Y.reshape(-1, 1)
sc= StandardScaler()
X = sc.fit_transform(X)
y = sc.fit_transform(Y)
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.08, random_state = 0)
y_test = y_test.ravel()
y_train = y_train.ravel()

from sklearn.svm import SVR
regressor = SVR(kernel='rbf')
regressor.fit(X_train,y_train)
y_pred = regressor.predict(X_test)

fig = plt.figure()
ax = plt.subplot(111)
ax.plot(y_test[10:50], color = 'red', label = 'Real data')
ax.plot(y_pred[10:50], color = 'blue', label = 'Predicted data')
plt.title('SVR Prediction')
ax.legend()
plt.show()
fig.savefig("SVR_result.png")
files.download("SVR_result.png")

metrics.mean_squared_error(y_test,y_pred)